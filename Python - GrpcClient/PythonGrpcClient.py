import grpc
import os
from timeit import default_timer as timer
from datetime import timedelta

# Import dependencies generated by gRPC tools
import Image_pb2
import Image_pb2_grpc

MAX_MESSAGE_LENGTH = 1500 * 1024 * 1024 #500MB

def serializeToFile(responseImage):
	# Write the new address book back to disk.
	serializeToFileName = str(os.getcwd()+"\\"+responseImage.Image.Name+".dat")
	f = open(serializeToFileName, "wb")
	f.write(responseImage.SerializeToString())
	f.close()
	print("Serialized To File %s" % (serializeToFileName))
	
def getImage(stub):
	responseImage = stub.GetImage(Image_pb2.ImageRequest(FilePath = "D:\\Thamarai\\Research\\Downloads\\coil-100\\coil-100\\obj100__350.png"))
	print("GetImage called %s" % (responseImage.Image.Name))
	serializeToFile(responseImage)

def serializeListToFile(responseImages):
	# Write the new address book back to disk.
	serializeToFileName = str(os.getcwd()+"\\OutputDB.dat")
	f = open(serializeToFileName, "wb")
	f.write(responseImages.SerializeToString())
	f.close()
	print("Serialized To File %s" % (serializeToFileName))
	
def getImageList(stub):
	start = timer()
	responseImages = stub.GetImageList(Image_pb2.ImageRequest(FilePath = "D:\\Thamarai\\Research\\Downloads\\TestImages\\"))
	print("GetImageList called")
	end = timer()
	print("GetImageList Time : ",timedelta(seconds=end-start))
	serializeListToFile(responseImages)
	
def run():
    # Secured channel using dotnet dev certificate

	with grpc.insecure_channel('localhost:50051', options=[
        ('grpc.max_send_message_length', MAX_MESSAGE_LENGTH),
        ('grpc.max_receive_message_length', MAX_MESSAGE_LENGTH),
    ],) as channel:
		stub = Image_pb2_grpc.ImageServiceStub(channel)

		#print("-------------- Get Image --------------")
		#getImage(stub)
		print("-------------- Get Image List --------------")
		start = timer()

		getImageList(stub)
		end = timer()
		print("Run Time : ",timedelta(seconds=end-start))


if __name__ == '__main__':
	start = timer()
	run()
	end = timer()
	print("Overall Time : ",timedelta(seconds=end-start))
    